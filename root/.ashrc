# ~/.ashrc

# ensure root doesn't leak information
# when creating file/dir, however this may be problematic
# with package manager that follows the mask...
umask 027

# permit to install content inside /usr/local from user privilege.
fs.open.usr.local()
{
  chmod -v o+rwx /usr/local/lib
  chmod -v o+rwx /usr/local/bin
  chmod -v o+rwx /usr/local/sbin
  chmod -v o+rwx /usr/local/include
  chmod -v o+rwx /usr/local/share
}

# permit to install content inside /opt from user privilege.
fs.open.opt()
{
  chmod -v o+rwx /opt
}

# clean up write access and reset owner to root.
fs.close()
{
  if [ -d "$1" ]; then
    chmod -Rv o-w "$1"
    chown -Rv root:root "$1"
  else
    echo "$0 <dir>\n\t- <dir>:The directory to reset privileges."
  fi
}

# cpufreq ondemand|performance|...
cpufreq() {
  for i in /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor; do
    echo "$1" > "$i"
  done
}

# open up network alike we live in a wonderful world.
route.default() {
  ip route add default via <GATEWAY>
  ip route del <GATEWAY>
  ip route del <REMOTEHOST>
}

# open up upper layers to a given remote host
route.open.to() {
  local TRUSTEDHOST="$1"
  ip route add "$TRUSTEDHOST" via <GATEWAY>
}

# close network entry at the routing lvl to the wide area network
# only remotehost is accountable to upper layers running on your host.
route.close.wan() {
  ip route add <GATEWAY> dev eth0 scope link
  ip route add <REMOTEHOST> via <GATEWAY>
  ip route del default
}

